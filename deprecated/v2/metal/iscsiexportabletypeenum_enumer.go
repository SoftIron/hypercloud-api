// Code generated by "enumer -type ISCSIExportableTypeEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _ISCSIExportableTypeEnumName = "AVAILABLEEXPORTEDINVALID_OPTIONS"

var _ISCSIExportableTypeEnumIndex = [...]uint8{0, 9, 17, 32}

const _ISCSIExportableTypeEnumLowerName = "availableexportedinvalid_options"

func (i ISCSIExportableTypeEnum) String() string {
	if i < 0 || i >= ISCSIExportableTypeEnum(len(_ISCSIExportableTypeEnumIndex)-1) {
		return fmt.Sprintf("ISCSIExportableTypeEnum(%d)", i)
	}
	return _ISCSIExportableTypeEnumName[_ISCSIExportableTypeEnumIndex[i]:_ISCSIExportableTypeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ISCSIExportableTypeEnumNoOp() {
	var x [1]struct{}
	_ = x[ISCSIExportableTypeAvailable-(0)]
	_ = x[ISCSIExportableTypeExported-(1)]
	_ = x[ISCSIExportableTypeInvalid-(2)]
}

var _ISCSIExportableTypeEnumValues = []ISCSIExportableTypeEnum{ISCSIExportableTypeAvailable, ISCSIExportableTypeExported, ISCSIExportableTypeInvalid}

var _ISCSIExportableTypeEnumNameToValueMap = map[string]ISCSIExportableTypeEnum{
	_ISCSIExportableTypeEnumName[0:9]:        ISCSIExportableTypeAvailable,
	_ISCSIExportableTypeEnumLowerName[0:9]:   ISCSIExportableTypeAvailable,
	_ISCSIExportableTypeEnumName[9:17]:       ISCSIExportableTypeExported,
	_ISCSIExportableTypeEnumLowerName[9:17]:  ISCSIExportableTypeExported,
	_ISCSIExportableTypeEnumName[17:32]:      ISCSIExportableTypeInvalid,
	_ISCSIExportableTypeEnumLowerName[17:32]: ISCSIExportableTypeInvalid,
}

var _ISCSIExportableTypeEnumNames = []string{
	_ISCSIExportableTypeEnumName[0:9],
	_ISCSIExportableTypeEnumName[9:17],
	_ISCSIExportableTypeEnumName[17:32],
}

// ISCSIExportableTypeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ISCSIExportableTypeEnumString(s string) (ISCSIExportableTypeEnum, error) {
	if val, ok := _ISCSIExportableTypeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ISCSIExportableTypeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ISCSIExportableTypeEnum values", s)
}

// ISCSIExportableTypeEnumValues returns all values of the enum
func ISCSIExportableTypeEnumValues() []ISCSIExportableTypeEnum {
	return _ISCSIExportableTypeEnumValues
}

// ISCSIExportableTypeEnumStrings returns a slice of all String values of the enum
func ISCSIExportableTypeEnumStrings() []string {
	strs := make([]string, len(_ISCSIExportableTypeEnumNames))
	copy(strs, _ISCSIExportableTypeEnumNames)
	return strs
}

// IsAISCSIExportableTypeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ISCSIExportableTypeEnum) IsAISCSIExportableTypeEnum() bool {
	for _, v := range _ISCSIExportableTypeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ISCSIExportableTypeEnum
func (i ISCSIExportableTypeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ISCSIExportableTypeEnum
func (i *ISCSIExportableTypeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = ISCSIExportableTypeEnumString(string(text))
	return err
}
