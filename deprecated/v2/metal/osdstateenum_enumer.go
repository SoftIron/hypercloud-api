// Code generated by "enumer -type OSDStateEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _OSDStateEnumName = "UPDOWNOUT"

var _OSDStateEnumIndex = [...]uint8{0, 2, 6, 9}

const _OSDStateEnumLowerName = "updownout"

func (i OSDStateEnum) String() string {
	if i < 0 || i >= OSDStateEnum(len(_OSDStateEnumIndex)-1) {
		return fmt.Sprintf("OSDStateEnum(%d)", i)
	}
	return _OSDStateEnumName[_OSDStateEnumIndex[i]:_OSDStateEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OSDStateEnumNoOp() {
	var x [1]struct{}
	_ = x[OSDStateUp-(0)]
	_ = x[OSDStateDown-(1)]
	_ = x[OSDStateOut-(2)]
}

var _OSDStateEnumValues = []OSDStateEnum{OSDStateUp, OSDStateDown, OSDStateOut}

var _OSDStateEnumNameToValueMap = map[string]OSDStateEnum{
	_OSDStateEnumName[0:2]:      OSDStateUp,
	_OSDStateEnumLowerName[0:2]: OSDStateUp,
	_OSDStateEnumName[2:6]:      OSDStateDown,
	_OSDStateEnumLowerName[2:6]: OSDStateDown,
	_OSDStateEnumName[6:9]:      OSDStateOut,
	_OSDStateEnumLowerName[6:9]: OSDStateOut,
}

var _OSDStateEnumNames = []string{
	_OSDStateEnumName[0:2],
	_OSDStateEnumName[2:6],
	_OSDStateEnumName[6:9],
}

// OSDStateEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OSDStateEnumString(s string) (OSDStateEnum, error) {
	if val, ok := _OSDStateEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OSDStateEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OSDStateEnum values", s)
}

// OSDStateEnumValues returns all values of the enum
func OSDStateEnumValues() []OSDStateEnum {
	return _OSDStateEnumValues
}

// OSDStateEnumStrings returns a slice of all String values of the enum
func OSDStateEnumStrings() []string {
	strs := make([]string, len(_OSDStateEnumNames))
	copy(strs, _OSDStateEnumNames)
	return strs
}

// IsAOSDStateEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OSDStateEnum) IsAOSDStateEnum() bool {
	for _, v := range _OSDStateEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OSDStateEnum
func (i OSDStateEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OSDStateEnum
func (i *OSDStateEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = OSDStateEnumString(string(text))
	return err
}
