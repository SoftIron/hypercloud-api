// Code generated by "enumer -type OSDClassEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _OSDClassEnumName = "SSDHDD"

var _OSDClassEnumIndex = [...]uint8{0, 3, 6}

const _OSDClassEnumLowerName = "ssdhdd"

func (i OSDClassEnum) String() string {
	if i < 0 || i >= OSDClassEnum(len(_OSDClassEnumIndex)-1) {
		return fmt.Sprintf("OSDClassEnum(%d)", i)
	}
	return _OSDClassEnumName[_OSDClassEnumIndex[i]:_OSDClassEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OSDClassEnumNoOp() {
	var x [1]struct{}
	_ = x[OSDClassSSD-(0)]
	_ = x[OSDClassHDD-(1)]
}

var _OSDClassEnumValues = []OSDClassEnum{OSDClassSSD, OSDClassHDD}

var _OSDClassEnumNameToValueMap = map[string]OSDClassEnum{
	_OSDClassEnumName[0:3]:      OSDClassSSD,
	_OSDClassEnumLowerName[0:3]: OSDClassSSD,
	_OSDClassEnumName[3:6]:      OSDClassHDD,
	_OSDClassEnumLowerName[3:6]: OSDClassHDD,
}

var _OSDClassEnumNames = []string{
	_OSDClassEnumName[0:3],
	_OSDClassEnumName[3:6],
}

// OSDClassEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OSDClassEnumString(s string) (OSDClassEnum, error) {
	if val, ok := _OSDClassEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OSDClassEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OSDClassEnum values", s)
}

// OSDClassEnumValues returns all values of the enum
func OSDClassEnumValues() []OSDClassEnum {
	return _OSDClassEnumValues
}

// OSDClassEnumStrings returns a slice of all String values of the enum
func OSDClassEnumStrings() []string {
	strs := make([]string, len(_OSDClassEnumNames))
	copy(strs, _OSDClassEnumNames)
	return strs
}

// IsAOSDClassEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OSDClassEnum) IsAOSDClassEnum() bool {
	for _, v := range _OSDClassEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OSDClassEnum
func (i OSDClassEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OSDClassEnum
func (i *OSDClassEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = OSDClassEnumString(string(text))
	return err
}
