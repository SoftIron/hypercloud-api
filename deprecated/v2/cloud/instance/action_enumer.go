// Code generated by "enumer -type Action -linecomment -text"; DO NOT EDIT.

package instance

import (
	"fmt"
	"strings"
)

const _ActionName = "nonemigratelive-migrateshutdownshutdown-hardundeployundeploy-hardholdreleasestopsuspendresumebootdeletedelete-recreaterebootreboot-hardreschedunreschedpoweroffpoweroff-harddisk-attachdisk-detachnic-attachnic-detachdisk-snapshot-createdisk-snapshot-deleteterminateterminate-harddisk-resizedeploychownchmodupdateconfrenameresizeupdatesnapshot-createsnapshot-deletesnapshot-revertdisk-saveasdisk-snapshot-revertrecoverretrymonitordisk-snapshot-renamealias-attachalias-detachpoff-migratepoff-hard-migrate"

var _ActionIndex = [...]uint16{0, 4, 11, 23, 31, 44, 52, 65, 69, 76, 80, 87, 93, 97, 103, 118, 124, 135, 142, 151, 159, 172, 183, 194, 204, 214, 234, 254, 263, 277, 288, 294, 299, 304, 314, 320, 326, 332, 347, 362, 377, 388, 408, 415, 420, 427, 447, 459, 471, 483, 500}

const _ActionLowerName = "nonemigratelive-migrateshutdownshutdown-hardundeployundeploy-hardholdreleasestopsuspendresumebootdeletedelete-recreaterebootreboot-hardreschedunreschedpoweroffpoweroff-harddisk-attachdisk-detachnic-attachnic-detachdisk-snapshot-createdisk-snapshot-deleteterminateterminate-harddisk-resizedeploychownchmodupdateconfrenameresizeupdatesnapshot-createsnapshot-deletesnapshot-revertdisk-saveasdisk-snapshot-revertrecoverretrymonitordisk-snapshot-renamealias-attachalias-detachpoff-migratepoff-hard-migrate"

func (i Action) String() string {
	if i < 0 || i >= Action(len(_ActionIndex)-1) {
		return fmt.Sprintf("Action(%d)", i)
	}
	return _ActionName[_ActionIndex[i]:_ActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionNoOp() {
	var x [1]struct{}
	_ = x[NoneAction-(0)]
	_ = x[MigrateAction-(1)]
	_ = x[LiveMigrateAction-(2)]
	_ = x[ShutdownAction-(3)]
	_ = x[ShutdownHardAction-(4)]
	_ = x[UndeployAction-(5)]
	_ = x[UndeployHardAction-(6)]
	_ = x[HoldAction-(7)]
	_ = x[ReleaseAction-(8)]
	_ = x[StopAction-(9)]
	_ = x[SuspendAction-(10)]
	_ = x[ResumeAction-(11)]
	_ = x[BootAction-(12)]
	_ = x[DeleteAction-(13)]
	_ = x[DeleteRecreateAction-(14)]
	_ = x[RebootAction-(15)]
	_ = x[RebootHardAction-(16)]
	_ = x[RescheduleAction-(17)]
	_ = x[UnrescheduleAction-(18)]
	_ = x[PowerOffAction-(19)]
	_ = x[PowerOffHardAction-(20)]
	_ = x[DiskAttachAction-(21)]
	_ = x[DiskDetachAction-(22)]
	_ = x[NicAttachAction-(23)]
	_ = x[NicDetachAction-(24)]
	_ = x[DiskSnapshotCreateAction-(25)]
	_ = x[DiskSnapshotDeleteAction-(26)]
	_ = x[TerminateAction-(27)]
	_ = x[TerminateHardAction-(28)]
	_ = x[DiskResizeAction-(29)]
	_ = x[DeployAction-(30)]
	_ = x[ChownAction-(31)]
	_ = x[ChmodAction-(32)]
	_ = x[UpdateconfAction-(33)]
	_ = x[RenameAction-(34)]
	_ = x[ResizeAction-(35)]
	_ = x[UpdateAction-(36)]
	_ = x[SnapshotCreateAction-(37)]
	_ = x[SnapshotDeleteAction-(38)]
	_ = x[SnapshotRevertAction-(39)]
	_ = x[DiskSaveasAction-(40)]
	_ = x[DiskSnapshotRevertAction-(41)]
	_ = x[RecoverAction-(42)]
	_ = x[RetryAction-(43)]
	_ = x[MonitorAction-(44)]
	_ = x[DiskSnapshotRenameAction-(45)]
	_ = x[AliasAttachAction-(46)]
	_ = x[AliasDetachAction-(47)]
	_ = x[PoffMigrateAction-(48)]
	_ = x[PoffHardMigrateAction-(49)]
}

var _ActionValues = []Action{NoneAction, MigrateAction, LiveMigrateAction, ShutdownAction, ShutdownHardAction, UndeployAction, UndeployHardAction, HoldAction, ReleaseAction, StopAction, SuspendAction, ResumeAction, BootAction, DeleteAction, DeleteRecreateAction, RebootAction, RebootHardAction, RescheduleAction, UnrescheduleAction, PowerOffAction, PowerOffHardAction, DiskAttachAction, DiskDetachAction, NicAttachAction, NicDetachAction, DiskSnapshotCreateAction, DiskSnapshotDeleteAction, TerminateAction, TerminateHardAction, DiskResizeAction, DeployAction, ChownAction, ChmodAction, UpdateconfAction, RenameAction, ResizeAction, UpdateAction, SnapshotCreateAction, SnapshotDeleteAction, SnapshotRevertAction, DiskSaveasAction, DiskSnapshotRevertAction, RecoverAction, RetryAction, MonitorAction, DiskSnapshotRenameAction, AliasAttachAction, AliasDetachAction, PoffMigrateAction, PoffHardMigrateAction}

var _ActionNameToValueMap = map[string]Action{
	_ActionName[0:4]:          NoneAction,
	_ActionLowerName[0:4]:     NoneAction,
	_ActionName[4:11]:         MigrateAction,
	_ActionLowerName[4:11]:    MigrateAction,
	_ActionName[11:23]:        LiveMigrateAction,
	_ActionLowerName[11:23]:   LiveMigrateAction,
	_ActionName[23:31]:        ShutdownAction,
	_ActionLowerName[23:31]:   ShutdownAction,
	_ActionName[31:44]:        ShutdownHardAction,
	_ActionLowerName[31:44]:   ShutdownHardAction,
	_ActionName[44:52]:        UndeployAction,
	_ActionLowerName[44:52]:   UndeployAction,
	_ActionName[52:65]:        UndeployHardAction,
	_ActionLowerName[52:65]:   UndeployHardAction,
	_ActionName[65:69]:        HoldAction,
	_ActionLowerName[65:69]:   HoldAction,
	_ActionName[69:76]:        ReleaseAction,
	_ActionLowerName[69:76]:   ReleaseAction,
	_ActionName[76:80]:        StopAction,
	_ActionLowerName[76:80]:   StopAction,
	_ActionName[80:87]:        SuspendAction,
	_ActionLowerName[80:87]:   SuspendAction,
	_ActionName[87:93]:        ResumeAction,
	_ActionLowerName[87:93]:   ResumeAction,
	_ActionName[93:97]:        BootAction,
	_ActionLowerName[93:97]:   BootAction,
	_ActionName[97:103]:       DeleteAction,
	_ActionLowerName[97:103]:  DeleteAction,
	_ActionName[103:118]:      DeleteRecreateAction,
	_ActionLowerName[103:118]: DeleteRecreateAction,
	_ActionName[118:124]:      RebootAction,
	_ActionLowerName[118:124]: RebootAction,
	_ActionName[124:135]:      RebootHardAction,
	_ActionLowerName[124:135]: RebootHardAction,
	_ActionName[135:142]:      RescheduleAction,
	_ActionLowerName[135:142]: RescheduleAction,
	_ActionName[142:151]:      UnrescheduleAction,
	_ActionLowerName[142:151]: UnrescheduleAction,
	_ActionName[151:159]:      PowerOffAction,
	_ActionLowerName[151:159]: PowerOffAction,
	_ActionName[159:172]:      PowerOffHardAction,
	_ActionLowerName[159:172]: PowerOffHardAction,
	_ActionName[172:183]:      DiskAttachAction,
	_ActionLowerName[172:183]: DiskAttachAction,
	_ActionName[183:194]:      DiskDetachAction,
	_ActionLowerName[183:194]: DiskDetachAction,
	_ActionName[194:204]:      NicAttachAction,
	_ActionLowerName[194:204]: NicAttachAction,
	_ActionName[204:214]:      NicDetachAction,
	_ActionLowerName[204:214]: NicDetachAction,
	_ActionName[214:234]:      DiskSnapshotCreateAction,
	_ActionLowerName[214:234]: DiskSnapshotCreateAction,
	_ActionName[234:254]:      DiskSnapshotDeleteAction,
	_ActionLowerName[234:254]: DiskSnapshotDeleteAction,
	_ActionName[254:263]:      TerminateAction,
	_ActionLowerName[254:263]: TerminateAction,
	_ActionName[263:277]:      TerminateHardAction,
	_ActionLowerName[263:277]: TerminateHardAction,
	_ActionName[277:288]:      DiskResizeAction,
	_ActionLowerName[277:288]: DiskResizeAction,
	_ActionName[288:294]:      DeployAction,
	_ActionLowerName[288:294]: DeployAction,
	_ActionName[294:299]:      ChownAction,
	_ActionLowerName[294:299]: ChownAction,
	_ActionName[299:304]:      ChmodAction,
	_ActionLowerName[299:304]: ChmodAction,
	_ActionName[304:314]:      UpdateconfAction,
	_ActionLowerName[304:314]: UpdateconfAction,
	_ActionName[314:320]:      RenameAction,
	_ActionLowerName[314:320]: RenameAction,
	_ActionName[320:326]:      ResizeAction,
	_ActionLowerName[320:326]: ResizeAction,
	_ActionName[326:332]:      UpdateAction,
	_ActionLowerName[326:332]: UpdateAction,
	_ActionName[332:347]:      SnapshotCreateAction,
	_ActionLowerName[332:347]: SnapshotCreateAction,
	_ActionName[347:362]:      SnapshotDeleteAction,
	_ActionLowerName[347:362]: SnapshotDeleteAction,
	_ActionName[362:377]:      SnapshotRevertAction,
	_ActionLowerName[362:377]: SnapshotRevertAction,
	_ActionName[377:388]:      DiskSaveasAction,
	_ActionLowerName[377:388]: DiskSaveasAction,
	_ActionName[388:408]:      DiskSnapshotRevertAction,
	_ActionLowerName[388:408]: DiskSnapshotRevertAction,
	_ActionName[408:415]:      RecoverAction,
	_ActionLowerName[408:415]: RecoverAction,
	_ActionName[415:420]:      RetryAction,
	_ActionLowerName[415:420]: RetryAction,
	_ActionName[420:427]:      MonitorAction,
	_ActionLowerName[420:427]: MonitorAction,
	_ActionName[427:447]:      DiskSnapshotRenameAction,
	_ActionLowerName[427:447]: DiskSnapshotRenameAction,
	_ActionName[447:459]:      AliasAttachAction,
	_ActionLowerName[447:459]: AliasAttachAction,
	_ActionName[459:471]:      AliasDetachAction,
	_ActionLowerName[459:471]: AliasDetachAction,
	_ActionName[471:483]:      PoffMigrateAction,
	_ActionLowerName[471:483]: PoffMigrateAction,
	_ActionName[483:500]:      PoffHardMigrateAction,
	_ActionLowerName[483:500]: PoffHardMigrateAction,
}

var _ActionNames = []string{
	_ActionName[0:4],
	_ActionName[4:11],
	_ActionName[11:23],
	_ActionName[23:31],
	_ActionName[31:44],
	_ActionName[44:52],
	_ActionName[52:65],
	_ActionName[65:69],
	_ActionName[69:76],
	_ActionName[76:80],
	_ActionName[80:87],
	_ActionName[87:93],
	_ActionName[93:97],
	_ActionName[97:103],
	_ActionName[103:118],
	_ActionName[118:124],
	_ActionName[124:135],
	_ActionName[135:142],
	_ActionName[142:151],
	_ActionName[151:159],
	_ActionName[159:172],
	_ActionName[172:183],
	_ActionName[183:194],
	_ActionName[194:204],
	_ActionName[204:214],
	_ActionName[214:234],
	_ActionName[234:254],
	_ActionName[254:263],
	_ActionName[263:277],
	_ActionName[277:288],
	_ActionName[288:294],
	_ActionName[294:299],
	_ActionName[299:304],
	_ActionName[304:314],
	_ActionName[314:320],
	_ActionName[320:326],
	_ActionName[326:332],
	_ActionName[332:347],
	_ActionName[347:362],
	_ActionName[362:377],
	_ActionName[377:388],
	_ActionName[388:408],
	_ActionName[408:415],
	_ActionName[415:420],
	_ActionName[420:427],
	_ActionName[427:447],
	_ActionName[447:459],
	_ActionName[459:471],
	_ActionName[471:483],
	_ActionName[483:500],
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// ActionStrings returns a slice of all String values of the enum
func ActionStrings() []string {
	strs := make([]string, len(_ActionNames))
	copy(strs, _ActionNames)
	return strs
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Action
func (i Action) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Action
func (i *Action) UnmarshalText(text []byte) error {
	var err error
	*i, err = ActionString(string(text))
	return err
}
