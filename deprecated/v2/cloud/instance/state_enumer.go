// Code generated by "enumer -type State -linecomment -text"; DO NOT EDIT.

package instance

import (
	"fmt"
	"strings"
)

const (
	_StateName_0      = "allnot_doneinitpendingholdactivestoppedsuspendeddone"
	_StateLowerName_0 = "allnot_doneinitpendingholdactivestoppedsuspendeddone"
	_StateName_1      = "offundeployedcloningcloning_failed"
	_StateLowerName_1 = "offundeployedcloningcloning_failed"
)

var (
	_StateIndex_0 = [...]uint8{0, 3, 11, 15, 22, 26, 32, 39, 48, 52}
	_StateIndex_1 = [...]uint8{0, 3, 13, 20, 34}
)

func (i State) String() string {
	switch {
	case -2 <= i && i <= 6:
		i -= -2
		return _StateName_0[_StateIndex_0[i]:_StateIndex_0[i+1]]
	case 8 <= i && i <= 11:
		i -= 8
		return _StateName_1[_StateIndex_1[i]:_StateIndex_1[i+1]]
	default:
		return fmt.Sprintf("State(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StateNoOp() {
	var x [1]struct{}
	_ = x[AnyState-(-2)]
	_ = x[NotDoneState-(-1)]
	_ = x[InitState-(0)]
	_ = x[PendingState-(1)]
	_ = x[HoldState-(2)]
	_ = x[ActiveState-(3)]
	_ = x[StoppedState-(4)]
	_ = x[SuspendedState-(5)]
	_ = x[DoneState-(6)]
	_ = x[OffState-(8)]
	_ = x[UndeployedState-(9)]
	_ = x[CloningState-(10)]
	_ = x[CloningFailedState-(11)]
}

var _StateValues = []State{AnyState, NotDoneState, InitState, PendingState, HoldState, ActiveState, StoppedState, SuspendedState, DoneState, OffState, UndeployedState, CloningState, CloningFailedState}

var _StateNameToValueMap = map[string]State{
	_StateName_0[0:3]:        AnyState,
	_StateLowerName_0[0:3]:   AnyState,
	_StateName_0[3:11]:       NotDoneState,
	_StateLowerName_0[3:11]:  NotDoneState,
	_StateName_0[11:15]:      InitState,
	_StateLowerName_0[11:15]: InitState,
	_StateName_0[15:22]:      PendingState,
	_StateLowerName_0[15:22]: PendingState,
	_StateName_0[22:26]:      HoldState,
	_StateLowerName_0[22:26]: HoldState,
	_StateName_0[26:32]:      ActiveState,
	_StateLowerName_0[26:32]: ActiveState,
	_StateName_0[32:39]:      StoppedState,
	_StateLowerName_0[32:39]: StoppedState,
	_StateName_0[39:48]:      SuspendedState,
	_StateLowerName_0[39:48]: SuspendedState,
	_StateName_0[48:52]:      DoneState,
	_StateLowerName_0[48:52]: DoneState,
	_StateName_1[0:3]:        OffState,
	_StateLowerName_1[0:3]:   OffState,
	_StateName_1[3:13]:       UndeployedState,
	_StateLowerName_1[3:13]:  UndeployedState,
	_StateName_1[13:20]:      CloningState,
	_StateLowerName_1[13:20]: CloningState,
	_StateName_1[20:34]:      CloningFailedState,
	_StateLowerName_1[20:34]: CloningFailedState,
}

var _StateNames = []string{
	_StateName_0[0:3],
	_StateName_0[3:11],
	_StateName_0[11:15],
	_StateName_0[15:22],
	_StateName_0[22:26],
	_StateName_0[26:32],
	_StateName_0[32:39],
	_StateName_0[39:48],
	_StateName_0[48:52],
	_StateName_1[0:3],
	_StateName_1[3:13],
	_StateName_1[13:20],
	_StateName_1[20:34],
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// StateStrings returns a slice of all String values of the enum
func StateStrings() []string {
	strs := make([]string, len(_StateNames))
	copy(strs, _StateNames)
	return strs
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for State
func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for State
func (i *State) UnmarshalText(text []byte) error {
	var err error
	*i, err = StateString(string(text))
	return err
}
