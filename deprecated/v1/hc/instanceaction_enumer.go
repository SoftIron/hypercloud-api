// Code generated by "enumer -type InstanceAction -linecomment -text"; DO NOT EDIT.

package hc

import (
	"fmt"
	"strings"
)

const _InstanceActionName = "holdpoweroffpoweroff-hardrebootreboot-hardreleasereschedresumestopsuspendterminateteminate-hardunreschedundeployundeploy-hard"

var _InstanceActionIndex = [...]uint8{0, 4, 12, 25, 31, 42, 49, 56, 62, 66, 73, 82, 95, 104, 112, 125}

const _InstanceActionLowerName = "holdpoweroffpoweroff-hardrebootreboot-hardreleasereschedresumestopsuspendterminateteminate-hardunreschedundeployundeploy-hard"

func (i InstanceAction) String() string {
	i -= 1
	if i < 0 || i >= InstanceAction(len(_InstanceActionIndex)-1) {
		return fmt.Sprintf("InstanceAction(%d)", i+1)
	}
	return _InstanceActionName[_InstanceActionIndex[i]:_InstanceActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InstanceActionNoOp() {
	var x [1]struct{}
	_ = x[HoldAction-(1)]
	_ = x[PowerOffAction-(2)]
	_ = x[PowerOffHardAction-(3)]
	_ = x[RebootAction-(4)]
	_ = x[RebootHardAction-(5)]
	_ = x[ReleaseAction-(6)]
	_ = x[RescheduleAction-(7)]
	_ = x[ResumeAction-(8)]
	_ = x[StopAction-(9)]
	_ = x[SuspendAction-(10)]
	_ = x[TerminateAction-(11)]
	_ = x[TerminatehardAction-(12)]
	_ = x[UnRescheduleAction-(13)]
	_ = x[UndeployAction-(14)]
	_ = x[UndeployHardAction-(15)]
}

var _InstanceActionValues = []InstanceAction{HoldAction, PowerOffAction, PowerOffHardAction, RebootAction, RebootHardAction, ReleaseAction, RescheduleAction, ResumeAction, StopAction, SuspendAction, TerminateAction, TerminatehardAction, UnRescheduleAction, UndeployAction, UndeployHardAction}

var _InstanceActionNameToValueMap = map[string]InstanceAction{
	_InstanceActionName[0:4]:          HoldAction,
	_InstanceActionLowerName[0:4]:     HoldAction,
	_InstanceActionName[4:12]:         PowerOffAction,
	_InstanceActionLowerName[4:12]:    PowerOffAction,
	_InstanceActionName[12:25]:        PowerOffHardAction,
	_InstanceActionLowerName[12:25]:   PowerOffHardAction,
	_InstanceActionName[25:31]:        RebootAction,
	_InstanceActionLowerName[25:31]:   RebootAction,
	_InstanceActionName[31:42]:        RebootHardAction,
	_InstanceActionLowerName[31:42]:   RebootHardAction,
	_InstanceActionName[42:49]:        ReleaseAction,
	_InstanceActionLowerName[42:49]:   ReleaseAction,
	_InstanceActionName[49:56]:        RescheduleAction,
	_InstanceActionLowerName[49:56]:   RescheduleAction,
	_InstanceActionName[56:62]:        ResumeAction,
	_InstanceActionLowerName[56:62]:   ResumeAction,
	_InstanceActionName[62:66]:        StopAction,
	_InstanceActionLowerName[62:66]:   StopAction,
	_InstanceActionName[66:73]:        SuspendAction,
	_InstanceActionLowerName[66:73]:   SuspendAction,
	_InstanceActionName[73:82]:        TerminateAction,
	_InstanceActionLowerName[73:82]:   TerminateAction,
	_InstanceActionName[82:95]:        TerminatehardAction,
	_InstanceActionLowerName[82:95]:   TerminatehardAction,
	_InstanceActionName[95:104]:       UnRescheduleAction,
	_InstanceActionLowerName[95:104]:  UnRescheduleAction,
	_InstanceActionName[104:112]:      UndeployAction,
	_InstanceActionLowerName[104:112]: UndeployAction,
	_InstanceActionName[112:125]:      UndeployHardAction,
	_InstanceActionLowerName[112:125]: UndeployHardAction,
}

var _InstanceActionNames = []string{
	_InstanceActionName[0:4],
	_InstanceActionName[4:12],
	_InstanceActionName[12:25],
	_InstanceActionName[25:31],
	_InstanceActionName[31:42],
	_InstanceActionName[42:49],
	_InstanceActionName[49:56],
	_InstanceActionName[56:62],
	_InstanceActionName[62:66],
	_InstanceActionName[66:73],
	_InstanceActionName[73:82],
	_InstanceActionName[82:95],
	_InstanceActionName[95:104],
	_InstanceActionName[104:112],
	_InstanceActionName[112:125],
}

// InstanceActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstanceActionString(s string) (InstanceAction, error) {
	if val, ok := _InstanceActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InstanceActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstanceAction values", s)
}

// InstanceActionValues returns all values of the enum
func InstanceActionValues() []InstanceAction {
	return _InstanceActionValues
}

// InstanceActionStrings returns a slice of all String values of the enum
func InstanceActionStrings() []string {
	strs := make([]string, len(_InstanceActionNames))
	copy(strs, _InstanceActionNames)
	return strs
}

// IsAInstanceAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstanceAction) IsAInstanceAction() bool {
	for _, v := range _InstanceActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for InstanceAction
func (i InstanceAction) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for InstanceAction
func (i *InstanceAction) UnmarshalText(text []byte) error {
	var err error
	*i, err = InstanceActionString(string(text))
	return err
}
