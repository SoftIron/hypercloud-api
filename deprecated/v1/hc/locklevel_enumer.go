// Code generated by "enumer -type LockLevel -linecomment -text"; DO NOT EDIT.

package hc

import (
	"fmt"
	"strings"
)

const _LockLevelName = "usemanageadminall"

var _LockLevelIndex = [...]uint8{0, 3, 9, 14, 17}

const _LockLevelLowerName = "usemanageadminall"

func (i LockLevel) String() string {
	i -= 1
	if i < 0 || i >= LockLevel(len(_LockLevelIndex)-1) {
		return fmt.Sprintf("LockLevel(%d)", i+1)
	}
	return _LockLevelName[_LockLevelIndex[i]:_LockLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LockLevelNoOp() {
	var x [1]struct{}
	_ = x[UseLockLevel-(1)]
	_ = x[ManageLockLevel-(2)]
	_ = x[AdminLockLevel-(3)]
	_ = x[AllLockLevel-(4)]
}

var _LockLevelValues = []LockLevel{UseLockLevel, ManageLockLevel, AdminLockLevel, AllLockLevel}

var _LockLevelNameToValueMap = map[string]LockLevel{
	_LockLevelName[0:3]:        UseLockLevel,
	_LockLevelLowerName[0:3]:   UseLockLevel,
	_LockLevelName[3:9]:        ManageLockLevel,
	_LockLevelLowerName[3:9]:   ManageLockLevel,
	_LockLevelName[9:14]:       AdminLockLevel,
	_LockLevelLowerName[9:14]:  AdminLockLevel,
	_LockLevelName[14:17]:      AllLockLevel,
	_LockLevelLowerName[14:17]: AllLockLevel,
}

var _LockLevelNames = []string{
	_LockLevelName[0:3],
	_LockLevelName[3:9],
	_LockLevelName[9:14],
	_LockLevelName[14:17],
}

// LockLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LockLevelString(s string) (LockLevel, error) {
	if val, ok := _LockLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LockLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LockLevel values", s)
}

// LockLevelValues returns all values of the enum
func LockLevelValues() []LockLevel {
	return _LockLevelValues
}

// LockLevelStrings returns a slice of all String values of the enum
func LockLevelStrings() []string {
	strs := make([]string, len(_LockLevelNames))
	copy(strs, _LockLevelNames)
	return strs
}

// IsALockLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LockLevel) IsALockLevel() bool {
	for _, v := range _LockLevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for LockLevel
func (i LockLevel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for LockLevel
func (i *LockLevel) UnmarshalText(text []byte) error {
	var err error
	*i, err = LockLevelString(string(text))
	return err
}
