// Code generated by "enumer -type VNetRecovery -linecomment -text"; DO NOT EDIT.

package hc

import (
	"fmt"
	"strings"
)

const _VNetRecoveryName = "failuresuccessretry_vnetdelete_vnet"

var _VNetRecoveryIndex = [...]uint8{0, 7, 14, 24, 35}

const _VNetRecoveryLowerName = "failuresuccessretry_vnetdelete_vnet"

func (i VNetRecovery) String() string {
	if i < 0 || i >= VNetRecovery(len(_VNetRecoveryIndex)-1) {
		return fmt.Sprintf("VNetRecovery(%d)", i)
	}
	return _VNetRecoveryName[_VNetRecoveryIndex[i]:_VNetRecoveryIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VNetRecoveryNoOp() {
	var x [1]struct{}
	_ = x[FailureVNetRecovery-(0)]
	_ = x[SuccessVNetRecovery-(1)]
	_ = x[RetryVNetRecovery-(2)]
	_ = x[DeleteVNetRecovery-(3)]
}

var _VNetRecoveryValues = []VNetRecovery{FailureVNetRecovery, SuccessVNetRecovery, RetryVNetRecovery, DeleteVNetRecovery}

var _VNetRecoveryNameToValueMap = map[string]VNetRecovery{
	_VNetRecoveryName[0:7]:        FailureVNetRecovery,
	_VNetRecoveryLowerName[0:7]:   FailureVNetRecovery,
	_VNetRecoveryName[7:14]:       SuccessVNetRecovery,
	_VNetRecoveryLowerName[7:14]:  SuccessVNetRecovery,
	_VNetRecoveryName[14:24]:      RetryVNetRecovery,
	_VNetRecoveryLowerName[14:24]: RetryVNetRecovery,
	_VNetRecoveryName[24:35]:      DeleteVNetRecovery,
	_VNetRecoveryLowerName[24:35]: DeleteVNetRecovery,
}

var _VNetRecoveryNames = []string{
	_VNetRecoveryName[0:7],
	_VNetRecoveryName[7:14],
	_VNetRecoveryName[14:24],
	_VNetRecoveryName[24:35],
}

// VNetRecoveryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VNetRecoveryString(s string) (VNetRecovery, error) {
	if val, ok := _VNetRecoveryNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VNetRecoveryNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VNetRecovery values", s)
}

// VNetRecoveryValues returns all values of the enum
func VNetRecoveryValues() []VNetRecovery {
	return _VNetRecoveryValues
}

// VNetRecoveryStrings returns a slice of all String values of the enum
func VNetRecoveryStrings() []string {
	strs := make([]string, len(_VNetRecoveryNames))
	copy(strs, _VNetRecoveryNames)
	return strs
}

// IsAVNetRecovery returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VNetRecovery) IsAVNetRecovery() bool {
	for _, v := range _VNetRecoveryValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for VNetRecovery
func (i VNetRecovery) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for VNetRecovery
func (i *VNetRecovery) UnmarshalText(text []byte) error {
	var err error
	*i, err = VNetRecoveryString(string(text))
	return err
}
