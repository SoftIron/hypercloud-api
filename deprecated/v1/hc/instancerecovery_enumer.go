// Code generated by "enumer -type InstanceRecovery -linecomment -text"; DO NOT EDIT.

package hc

import (
	"fmt"
	"strings"
)

const _InstanceRecoveryName = "failuresuccessretrydeletedelete_recreatedelete_dbvn"

var _InstanceRecoveryIndex = [...]uint8{0, 7, 14, 19, 25, 40, 51}

const _InstanceRecoveryLowerName = "failuresuccessretrydeletedelete_recreatedelete_dbvn"

func (i InstanceRecovery) String() string {
	if i < 0 || i >= InstanceRecovery(len(_InstanceRecoveryIndex)-1) {
		return fmt.Sprintf("InstanceRecovery(%d)", i)
	}
	return _InstanceRecoveryName[_InstanceRecoveryIndex[i]:_InstanceRecoveryIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InstanceRecoveryNoOp() {
	var x [1]struct{}
	_ = x[FailureRecovery-(0)]
	_ = x[SuccessRecovery-(1)]
	_ = x[RetryRecovery-(2)]
	_ = x[DeleteRecovery-(3)]
	_ = x[DeleteRecreateRecovery-(4)]
	_ = x[DeleteDBVNRecovery-(5)]
}

var _InstanceRecoveryValues = []InstanceRecovery{FailureRecovery, SuccessRecovery, RetryRecovery, DeleteRecovery, DeleteRecreateRecovery, DeleteDBVNRecovery}

var _InstanceRecoveryNameToValueMap = map[string]InstanceRecovery{
	_InstanceRecoveryName[0:7]:        FailureRecovery,
	_InstanceRecoveryLowerName[0:7]:   FailureRecovery,
	_InstanceRecoveryName[7:14]:       SuccessRecovery,
	_InstanceRecoveryLowerName[7:14]:  SuccessRecovery,
	_InstanceRecoveryName[14:19]:      RetryRecovery,
	_InstanceRecoveryLowerName[14:19]: RetryRecovery,
	_InstanceRecoveryName[19:25]:      DeleteRecovery,
	_InstanceRecoveryLowerName[19:25]: DeleteRecovery,
	_InstanceRecoveryName[25:40]:      DeleteRecreateRecovery,
	_InstanceRecoveryLowerName[25:40]: DeleteRecreateRecovery,
	_InstanceRecoveryName[40:51]:      DeleteDBVNRecovery,
	_InstanceRecoveryLowerName[40:51]: DeleteDBVNRecovery,
}

var _InstanceRecoveryNames = []string{
	_InstanceRecoveryName[0:7],
	_InstanceRecoveryName[7:14],
	_InstanceRecoveryName[14:19],
	_InstanceRecoveryName[19:25],
	_InstanceRecoveryName[25:40],
	_InstanceRecoveryName[40:51],
}

// InstanceRecoveryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InstanceRecoveryString(s string) (InstanceRecovery, error) {
	if val, ok := _InstanceRecoveryNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InstanceRecoveryNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InstanceRecovery values", s)
}

// InstanceRecoveryValues returns all values of the enum
func InstanceRecoveryValues() []InstanceRecovery {
	return _InstanceRecoveryValues
}

// InstanceRecoveryStrings returns a slice of all String values of the enum
func InstanceRecoveryStrings() []string {
	strs := make([]string, len(_InstanceRecoveryNames))
	copy(strs, _InstanceRecoveryNames)
	return strs
}

// IsAInstanceRecovery returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InstanceRecovery) IsAInstanceRecovery() bool {
	for _, v := range _InstanceRecoveryValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for InstanceRecovery
func (i InstanceRecovery) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for InstanceRecovery
func (i *InstanceRecovery) UnmarshalText(text []byte) error {
	var err error
	*i, err = InstanceRecoveryString(string(text))
	return err
}
