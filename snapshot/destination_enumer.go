// Code generated by "enumer -type Destination -transform lower -text"; DO NOT EDIT.

package snapshot

import (
	"fmt"
	"strings"
)

const _DestinationName = "localremotearchive"

var _DestinationIndex = [...]uint8{0, 5, 11, 18}

const _DestinationLowerName = "localremotearchive"

func (i Destination) String() string {
	if i < 0 || i >= Destination(len(_DestinationIndex)-1) {
		return fmt.Sprintf("Destination(%d)", i)
	}
	return _DestinationName[_DestinationIndex[i]:_DestinationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DestinationNoOp() {
	var x [1]struct{}
	_ = x[Local-(0)]
	_ = x[Remote-(1)]
	_ = x[Archive-(2)]
}

var _DestinationValues = []Destination{Local, Remote, Archive}

var _DestinationNameToValueMap = map[string]Destination{
	_DestinationName[0:5]:        Local,
	_DestinationLowerName[0:5]:   Local,
	_DestinationName[5:11]:       Remote,
	_DestinationLowerName[5:11]:  Remote,
	_DestinationName[11:18]:      Archive,
	_DestinationLowerName[11:18]: Archive,
}

var _DestinationNames = []string{
	_DestinationName[0:5],
	_DestinationName[5:11],
	_DestinationName[11:18],
}

// DestinationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DestinationString(s string) (Destination, error) {
	if val, ok := _DestinationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DestinationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Destination values", s)
}

// DestinationValues returns all values of the enum
func DestinationValues() []Destination {
	return _DestinationValues
}

// DestinationStrings returns a slice of all String values of the enum
func DestinationStrings() []string {
	strs := make([]string, len(_DestinationNames))
	copy(strs, _DestinationNames)
	return strs
}

// IsADestination returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Destination) IsADestination() bool {
	for _, v := range _DestinationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Destination
func (i Destination) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Destination
func (i *Destination) UnmarshalText(text []byte) error {
	var err error
	*i, err = DestinationString(string(text))
	return err
}
