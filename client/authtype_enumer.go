// Code generated by "enumer -type authType -linecomment -text"; DO NOT EDIT.

package client

import (
	"fmt"
	"strings"
)

const _authTypeName = "noneaccess-tokenrefresh-tokenbasic-auth"

var _authTypeIndex = [...]uint8{0, 4, 16, 29, 39}

const _authTypeLowerName = "noneaccess-tokenrefresh-tokenbasic-auth"

func (i authType) String() string {
	if i < 0 || i >= authType(len(_authTypeIndex)-1) {
		return fmt.Sprintf("authType(%d)", i)
	}
	return _authTypeName[_authTypeIndex[i]:_authTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _authTypeNoOp() {
	var x [1]struct{}
	_ = x[NoAuth-(0)]
	_ = x[AccessTokenAuth-(1)]
	_ = x[RefreshTokenAuth-(2)]
	_ = x[BasicAuth-(3)]
}

var _authTypeValues = []authType{NoAuth, AccessTokenAuth, RefreshTokenAuth, BasicAuth}

var _authTypeNameToValueMap = map[string]authType{
	_authTypeName[0:4]:        NoAuth,
	_authTypeLowerName[0:4]:   NoAuth,
	_authTypeName[4:16]:       AccessTokenAuth,
	_authTypeLowerName[4:16]:  AccessTokenAuth,
	_authTypeName[16:29]:      RefreshTokenAuth,
	_authTypeLowerName[16:29]: RefreshTokenAuth,
	_authTypeName[29:39]:      BasicAuth,
	_authTypeLowerName[29:39]: BasicAuth,
}

var _authTypeNames = []string{
	_authTypeName[0:4],
	_authTypeName[4:16],
	_authTypeName[16:29],
	_authTypeName[29:39],
}

// authTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func authTypeString(s string) (authType, error) {
	if val, ok := _authTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _authTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to authType values", s)
}

// authTypeValues returns all values of the enum
func authTypeValues() []authType {
	return _authTypeValues
}

// authTypeStrings returns a slice of all String values of the enum
func authTypeStrings() []string {
	strs := make([]string, len(_authTypeNames))
	copy(strs, _authTypeNames)
	return strs
}

// IsAauthType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i authType) IsAauthType() bool {
	for _, v := range _authTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for authType
func (i authType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for authType
func (i *authType) UnmarshalText(text []byte) error {
	var err error
	*i, err = authTypeString(string(text))
	return err
}
