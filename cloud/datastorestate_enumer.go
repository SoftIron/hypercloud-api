// Code generated by "enumer -type DatastoreState -linecomment -text"; DO NOT EDIT.

package cloud

import (
	"fmt"
	"strings"
)

const _DatastoreStateName = "readydisabled"

var _DatastoreStateIndex = [...]uint8{0, 5, 13}

const _DatastoreStateLowerName = "readydisabled"

func (i DatastoreState) String() string {
	if i < 0 || i >= DatastoreState(len(_DatastoreStateIndex)-1) {
		return fmt.Sprintf("DatastoreState(%d)", i)
	}
	return _DatastoreStateName[_DatastoreStateIndex[i]:_DatastoreStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatastoreStateNoOp() {
	var x [1]struct{}
	_ = x[DatastoreReady-(0)]
	_ = x[DatastoreDisabled-(1)]
}

var _DatastoreStateValues = []DatastoreState{DatastoreReady, DatastoreDisabled}

var _DatastoreStateNameToValueMap = map[string]DatastoreState{
	_DatastoreStateName[0:5]:       DatastoreReady,
	_DatastoreStateLowerName[0:5]:  DatastoreReady,
	_DatastoreStateName[5:13]:      DatastoreDisabled,
	_DatastoreStateLowerName[5:13]: DatastoreDisabled,
}

var _DatastoreStateNames = []string{
	_DatastoreStateName[0:5],
	_DatastoreStateName[5:13],
}

// DatastoreStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatastoreStateString(s string) (DatastoreState, error) {
	if val, ok := _DatastoreStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatastoreStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatastoreState values", s)
}

// DatastoreStateValues returns all values of the enum
func DatastoreStateValues() []DatastoreState {
	return _DatastoreStateValues
}

// DatastoreStateStrings returns a slice of all String values of the enum
func DatastoreStateStrings() []string {
	strs := make([]string, len(_DatastoreStateNames))
	copy(strs, _DatastoreStateNames)
	return strs
}

// IsADatastoreState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatastoreState) IsADatastoreState() bool {
	for _, v := range _DatastoreStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for DatastoreState
func (i DatastoreState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DatastoreState
func (i *DatastoreState) UnmarshalText(text []byte) error {
	var err error
	*i, err = DatastoreStateString(string(text))
	return err
}
