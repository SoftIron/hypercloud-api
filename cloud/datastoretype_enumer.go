// Code generated by "enumer -type DatastoreType -linecomment -text"; DO NOT EDIT.

package cloud

import (
	"fmt"
	"strings"
)

const _DatastoreTypeName = "imagesystemfile"

var _DatastoreTypeIndex = [...]uint8{0, 5, 11, 15}

const _DatastoreTypeLowerName = "imagesystemfile"

func (i DatastoreType) String() string {
	if i < 0 || i >= DatastoreType(len(_DatastoreTypeIndex)-1) {
		return fmt.Sprintf("DatastoreType(%d)", i)
	}
	return _DatastoreTypeName[_DatastoreTypeIndex[i]:_DatastoreTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatastoreTypeNoOp() {
	var x [1]struct{}
	_ = x[DatastoreImage-(0)]
	_ = x[DatastoreSystem-(1)]
	_ = x[DatastoreFile-(2)]
}

var _DatastoreTypeValues = []DatastoreType{DatastoreImage, DatastoreSystem, DatastoreFile}

var _DatastoreTypeNameToValueMap = map[string]DatastoreType{
	_DatastoreTypeName[0:5]:        DatastoreImage,
	_DatastoreTypeLowerName[0:5]:   DatastoreImage,
	_DatastoreTypeName[5:11]:       DatastoreSystem,
	_DatastoreTypeLowerName[5:11]:  DatastoreSystem,
	_DatastoreTypeName[11:15]:      DatastoreFile,
	_DatastoreTypeLowerName[11:15]: DatastoreFile,
}

var _DatastoreTypeNames = []string{
	_DatastoreTypeName[0:5],
	_DatastoreTypeName[5:11],
	_DatastoreTypeName[11:15],
}

// DatastoreTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatastoreTypeString(s string) (DatastoreType, error) {
	if val, ok := _DatastoreTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatastoreTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatastoreType values", s)
}

// DatastoreTypeValues returns all values of the enum
func DatastoreTypeValues() []DatastoreType {
	return _DatastoreTypeValues
}

// DatastoreTypeStrings returns a slice of all String values of the enum
func DatastoreTypeStrings() []string {
	strs := make([]string, len(_DatastoreTypeNames))
	copy(strs, _DatastoreTypeNames)
	return strs
}

// IsADatastoreType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatastoreType) IsADatastoreType() bool {
	for _, v := range _DatastoreTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for DatastoreType
func (i DatastoreType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DatastoreType
func (i *DatastoreType) UnmarshalText(text []byte) error {
	var err error
	*i, err = DatastoreTypeString(string(text))
	return err
}
