// Code generated by "enumer -type AuthType -linecomment -text"; DO NOT EDIT.

package cloud

import (
	"fmt"
	"strings"
)

const _AuthTypeName = "corepublicsshx509ldapserver_cipherserver_x509custom"

var _AuthTypeIndex = [...]uint8{0, 4, 10, 13, 17, 21, 34, 45, 51}

const _AuthTypeLowerName = "corepublicsshx509ldapserver_cipherserver_x509custom"

func (i AuthType) String() string {
	if i < 0 || i >= AuthType(len(_AuthTypeIndex)-1) {
		return fmt.Sprintf("AuthType(%d)", i)
	}
	return _AuthTypeName[_AuthTypeIndex[i]:_AuthTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AuthTypeNoOp() {
	var x [1]struct{}
	_ = x[CoreAuth-(0)]
	_ = x[PublicAuth-(1)]
	_ = x[SSHAuth-(2)]
	_ = x[X509Auth-(3)]
	_ = x[LDAPAuth-(4)]
	_ = x[ServerCipherAuth-(5)]
	_ = x[ServerX509Auth-(6)]
	_ = x[CustomAuth-(7)]
}

var _AuthTypeValues = []AuthType{CoreAuth, PublicAuth, SSHAuth, X509Auth, LDAPAuth, ServerCipherAuth, ServerX509Auth, CustomAuth}

var _AuthTypeNameToValueMap = map[string]AuthType{
	_AuthTypeName[0:4]:        CoreAuth,
	_AuthTypeLowerName[0:4]:   CoreAuth,
	_AuthTypeName[4:10]:       PublicAuth,
	_AuthTypeLowerName[4:10]:  PublicAuth,
	_AuthTypeName[10:13]:      SSHAuth,
	_AuthTypeLowerName[10:13]: SSHAuth,
	_AuthTypeName[13:17]:      X509Auth,
	_AuthTypeLowerName[13:17]: X509Auth,
	_AuthTypeName[17:21]:      LDAPAuth,
	_AuthTypeLowerName[17:21]: LDAPAuth,
	_AuthTypeName[21:34]:      ServerCipherAuth,
	_AuthTypeLowerName[21:34]: ServerCipherAuth,
	_AuthTypeName[34:45]:      ServerX509Auth,
	_AuthTypeLowerName[34:45]: ServerX509Auth,
	_AuthTypeName[45:51]:      CustomAuth,
	_AuthTypeLowerName[45:51]: CustomAuth,
}

var _AuthTypeNames = []string{
	_AuthTypeName[0:4],
	_AuthTypeName[4:10],
	_AuthTypeName[10:13],
	_AuthTypeName[13:17],
	_AuthTypeName[17:21],
	_AuthTypeName[21:34],
	_AuthTypeName[34:45],
	_AuthTypeName[45:51],
}

// AuthTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AuthTypeString(s string) (AuthType, error) {
	if val, ok := _AuthTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AuthTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AuthType values", s)
}

// AuthTypeValues returns all values of the enum
func AuthTypeValues() []AuthType {
	return _AuthTypeValues
}

// AuthTypeStrings returns a slice of all String values of the enum
func AuthTypeStrings() []string {
	strs := make([]string, len(_AuthTypeNames))
	copy(strs, _AuthTypeNames)
	return strs
}

// IsAAuthType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AuthType) IsAAuthType() bool {
	for _, v := range _AuthTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for AuthType
func (i AuthType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AuthType
func (i *AuthType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AuthTypeString(string(text))
	return err
}
