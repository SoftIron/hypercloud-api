// Code generated by "enumer -type Filter -linecomment -text"; DO NOT EDIT.

package cloud

import (
	"fmt"
	"strings"
)

const _FilterName = "groupuseralluser_group"

var _FilterIndex = [...]uint8{0, 5, 9, 12, 22}

const _FilterLowerName = "groupuseralluser_group"

func (i Filter) String() string {
	i -= -4
	if i < 0 || i >= Filter(len(_FilterIndex)-1) {
		return fmt.Sprintf("Filter(%d)", i+-4)
	}
	return _FilterName[_FilterIndex[i]:_FilterIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FilterNoOp() {
	var x [1]struct{}
	_ = x[GroupFilter-(-4)]
	_ = x[UserFilter-(-3)]
	_ = x[AllFilter-(-2)]
	_ = x[UserAndGroupFilter-(-1)]
}

var _FilterValues = []Filter{GroupFilter, UserFilter, AllFilter, UserAndGroupFilter}

var _FilterNameToValueMap = map[string]Filter{
	_FilterName[0:5]:        GroupFilter,
	_FilterLowerName[0:5]:   GroupFilter,
	_FilterName[5:9]:        UserFilter,
	_FilterLowerName[5:9]:   UserFilter,
	_FilterName[9:12]:       AllFilter,
	_FilterLowerName[9:12]:  AllFilter,
	_FilterName[12:22]:      UserAndGroupFilter,
	_FilterLowerName[12:22]: UserAndGroupFilter,
}

var _FilterNames = []string{
	_FilterName[0:5],
	_FilterName[5:9],
	_FilterName[9:12],
	_FilterName[12:22],
}

// FilterString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FilterString(s string) (Filter, error) {
	if val, ok := _FilterNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FilterNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Filter values", s)
}

// FilterValues returns all values of the enum
func FilterValues() []Filter {
	return _FilterValues
}

// FilterStrings returns a slice of all String values of the enum
func FilterStrings() []string {
	strs := make([]string, len(_FilterNames))
	copy(strs, _FilterNames)
	return strs
}

// IsAFilter returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Filter) IsAFilter() bool {
	for _, v := range _FilterValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Filter
func (i Filter) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Filter
func (i *Filter) UnmarshalText(text []byte) error {
	var err error
	*i, err = FilterString(string(text))
	return err
}
