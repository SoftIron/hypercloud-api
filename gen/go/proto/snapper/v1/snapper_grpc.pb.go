// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/snapper/v1/snapper.proto

package snapperv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SnapperService_ListStack_FullMethodName            = "/snapper.v1.SnapperService/ListStack"
	SnapperService_ListStatus_FullMethodName           = "/snapper.v1.SnapperService/ListStatus"
	SnapperService_ListArchiveSnapshots_FullMethodName = "/snapper.v1.SnapperService/ListArchiveSnapshots"
	SnapperService_ListManualSnapshots_FullMethodName  = "/snapper.v1.SnapperService/ListManualSnapshots"
	SnapperService_ListRemoteSnapshots_FullMethodName  = "/snapper.v1.SnapperService/ListRemoteSnapshots"
)

// SnapperServiceClient is the client API for SnapperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapperServiceClient interface {
	ListStack(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListStackResponse, error)
	ListStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListStatusClient, error)
	ListArchiveSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListArchiveSnapshotsClient, error)
	ListManualSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListManualSnapshotsClient, error)
	ListRemoteSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListRemoteSnapshotsClient, error)
}

type snapperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapperServiceClient(cc grpc.ClientConnInterface) SnapperServiceClient {
	return &snapperServiceClient{cc}
}

func (c *snapperServiceClient) ListStack(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListStackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStackResponse)
	err := c.cc.Invoke(ctx, SnapperService_ListStack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapperServiceClient) ListStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListStatusClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapperService_ServiceDesc.Streams[0], SnapperService_ListStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &snapperServiceListStatusClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapperService_ListStatusClient interface {
	Recv() (*ListStatusResponse, error)
	grpc.ClientStream
}

type snapperServiceListStatusClient struct {
	grpc.ClientStream
}

func (x *snapperServiceListStatusClient) Recv() (*ListStatusResponse, error) {
	m := new(ListStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapperServiceClient) ListArchiveSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListArchiveSnapshotsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapperService_ServiceDesc.Streams[1], SnapperService_ListArchiveSnapshots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &snapperServiceListArchiveSnapshotsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapperService_ListArchiveSnapshotsClient interface {
	Recv() (*ListArchiveSnapshotsResponse, error)
	grpc.ClientStream
}

type snapperServiceListArchiveSnapshotsClient struct {
	grpc.ClientStream
}

func (x *snapperServiceListArchiveSnapshotsClient) Recv() (*ListArchiveSnapshotsResponse, error) {
	m := new(ListArchiveSnapshotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapperServiceClient) ListManualSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListManualSnapshotsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapperService_ServiceDesc.Streams[2], SnapperService_ListManualSnapshots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &snapperServiceListManualSnapshotsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapperService_ListManualSnapshotsClient interface {
	Recv() (*ListManualSnapshotsResponse, error)
	grpc.ClientStream
}

type snapperServiceListManualSnapshotsClient struct {
	grpc.ClientStream
}

func (x *snapperServiceListManualSnapshotsClient) Recv() (*ListManualSnapshotsResponse, error) {
	m := new(ListManualSnapshotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snapperServiceClient) ListRemoteSnapshots(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (SnapperService_ListRemoteSnapshotsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SnapperService_ServiceDesc.Streams[3], SnapperService_ListRemoteSnapshots_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &snapperServiceListRemoteSnapshotsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnapperService_ListRemoteSnapshotsClient interface {
	Recv() (*ListRemoteSnapshotsResponse, error)
	grpc.ClientStream
}

type snapperServiceListRemoteSnapshotsClient struct {
	grpc.ClientStream
}

func (x *snapperServiceListRemoteSnapshotsClient) Recv() (*ListRemoteSnapshotsResponse, error) {
	m := new(ListRemoteSnapshotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnapperServiceServer is the server API for SnapperService service.
// All implementations must embed UnimplementedSnapperServiceServer
// for forward compatibility
type SnapperServiceServer interface {
	ListStack(context.Context, *emptypb.Empty) (*ListStackResponse, error)
	ListStatus(*emptypb.Empty, SnapperService_ListStatusServer) error
	ListArchiveSnapshots(*emptypb.Empty, SnapperService_ListArchiveSnapshotsServer) error
	ListManualSnapshots(*emptypb.Empty, SnapperService_ListManualSnapshotsServer) error
	ListRemoteSnapshots(*emptypb.Empty, SnapperService_ListRemoteSnapshotsServer) error
	mustEmbedUnimplementedSnapperServiceServer()
}

// UnimplementedSnapperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapperServiceServer struct {
}

func (UnimplementedSnapperServiceServer) ListStack(context.Context, *emptypb.Empty) (*ListStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStack not implemented")
}
func (UnimplementedSnapperServiceServer) ListStatus(*emptypb.Empty, SnapperService_ListStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStatus not implemented")
}
func (UnimplementedSnapperServiceServer) ListArchiveSnapshots(*emptypb.Empty, SnapperService_ListArchiveSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListArchiveSnapshots not implemented")
}
func (UnimplementedSnapperServiceServer) ListManualSnapshots(*emptypb.Empty, SnapperService_ListManualSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListManualSnapshots not implemented")
}
func (UnimplementedSnapperServiceServer) ListRemoteSnapshots(*emptypb.Empty, SnapperService_ListRemoteSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRemoteSnapshots not implemented")
}
func (UnimplementedSnapperServiceServer) mustEmbedUnimplementedSnapperServiceServer() {}

// UnsafeSnapperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapperServiceServer will
// result in compilation errors.
type UnsafeSnapperServiceServer interface {
	mustEmbedUnimplementedSnapperServiceServer()
}

func RegisterSnapperServiceServer(s grpc.ServiceRegistrar, srv SnapperServiceServer) {
	s.RegisterService(&SnapperService_ServiceDesc, srv)
}

func _SnapperService_ListStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapperServiceServer).ListStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapperService_ListStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapperServiceServer).ListStack(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapperService_ListStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapperServiceServer).ListStatus(m, &snapperServiceListStatusServer{ServerStream: stream})
}

type SnapperService_ListStatusServer interface {
	Send(*ListStatusResponse) error
	grpc.ServerStream
}

type snapperServiceListStatusServer struct {
	grpc.ServerStream
}

func (x *snapperServiceListStatusServer) Send(m *ListStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapperService_ListArchiveSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapperServiceServer).ListArchiveSnapshots(m, &snapperServiceListArchiveSnapshotsServer{ServerStream: stream})
}

type SnapperService_ListArchiveSnapshotsServer interface {
	Send(*ListArchiveSnapshotsResponse) error
	grpc.ServerStream
}

type snapperServiceListArchiveSnapshotsServer struct {
	grpc.ServerStream
}

func (x *snapperServiceListArchiveSnapshotsServer) Send(m *ListArchiveSnapshotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapperService_ListManualSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapperServiceServer).ListManualSnapshots(m, &snapperServiceListManualSnapshotsServer{ServerStream: stream})
}

type SnapperService_ListManualSnapshotsServer interface {
	Send(*ListManualSnapshotsResponse) error
	grpc.ServerStream
}

type snapperServiceListManualSnapshotsServer struct {
	grpc.ServerStream
}

func (x *snapperServiceListManualSnapshotsServer) Send(m *ListManualSnapshotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SnapperService_ListRemoteSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnapperServiceServer).ListRemoteSnapshots(m, &snapperServiceListRemoteSnapshotsServer{ServerStream: stream})
}

type SnapperService_ListRemoteSnapshotsServer interface {
	Send(*ListRemoteSnapshotsResponse) error
	grpc.ServerStream
}

type snapperServiceListRemoteSnapshotsServer struct {
	grpc.ServerStream
}

func (x *snapperServiceListRemoteSnapshotsServer) Send(m *ListRemoteSnapshotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SnapperService_ServiceDesc is the grpc.ServiceDesc for SnapperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapper.v1.SnapperService",
	HandlerType: (*SnapperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStack",
			Handler:    _SnapperService_ListStack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStatus",
			Handler:       _SnapperService_ListStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListArchiveSnapshots",
			Handler:       _SnapperService_ListArchiveSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListManualSnapshots",
			Handler:       _SnapperService_ListManualSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRemoteSnapshots",
			Handler:       _SnapperService_ListRemoteSnapshots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/snapper/v1/snapper.proto",
}
