// Code generated by "enumer -type DatastoreSchemeEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _DatastoreSchemeEnumName = "triple_replicationec4+2ec8+3ec8+4"

var _DatastoreSchemeEnumIndex = [...]uint8{0, 18, 23, 28, 33}

const _DatastoreSchemeEnumLowerName = "triple_replicationec4+2ec8+3ec8+4"

func (i DatastoreSchemeEnum) String() string {
	if i < 0 || i >= DatastoreSchemeEnum(len(_DatastoreSchemeEnumIndex)-1) {
		return fmt.Sprintf("DatastoreSchemeEnum(%d)", i)
	}
	return _DatastoreSchemeEnumName[_DatastoreSchemeEnumIndex[i]:_DatastoreSchemeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatastoreSchemeEnumNoOp() {
	var x [1]struct{}
	_ = x[TripleReplication-(0)]
	_ = x[EC4Plus2-(1)]
	_ = x[EC8Plus3-(2)]
	_ = x[EC8Plus4-(3)]
}

var _DatastoreSchemeEnumValues = []DatastoreSchemeEnum{TripleReplication, EC4Plus2, EC8Plus3, EC8Plus4}

var _DatastoreSchemeEnumNameToValueMap = map[string]DatastoreSchemeEnum{
	_DatastoreSchemeEnumName[0:18]:       TripleReplication,
	_DatastoreSchemeEnumLowerName[0:18]:  TripleReplication,
	_DatastoreSchemeEnumName[18:23]:      EC4Plus2,
	_DatastoreSchemeEnumLowerName[18:23]: EC4Plus2,
	_DatastoreSchemeEnumName[23:28]:      EC8Plus3,
	_DatastoreSchemeEnumLowerName[23:28]: EC8Plus3,
	_DatastoreSchemeEnumName[28:33]:      EC8Plus4,
	_DatastoreSchemeEnumLowerName[28:33]: EC8Plus4,
}

var _DatastoreSchemeEnumNames = []string{
	_DatastoreSchemeEnumName[0:18],
	_DatastoreSchemeEnumName[18:23],
	_DatastoreSchemeEnumName[23:28],
	_DatastoreSchemeEnumName[28:33],
}

// DatastoreSchemeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatastoreSchemeEnumString(s string) (DatastoreSchemeEnum, error) {
	if val, ok := _DatastoreSchemeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatastoreSchemeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatastoreSchemeEnum values", s)
}

// DatastoreSchemeEnumValues returns all values of the enum
func DatastoreSchemeEnumValues() []DatastoreSchemeEnum {
	return _DatastoreSchemeEnumValues
}

// DatastoreSchemeEnumStrings returns a slice of all String values of the enum
func DatastoreSchemeEnumStrings() []string {
	strs := make([]string, len(_DatastoreSchemeEnumNames))
	copy(strs, _DatastoreSchemeEnumNames)
	return strs
}

// IsADatastoreSchemeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatastoreSchemeEnum) IsADatastoreSchemeEnum() bool {
	for _, v := range _DatastoreSchemeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for DatastoreSchemeEnum
func (i DatastoreSchemeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DatastoreSchemeEnum
func (i *DatastoreSchemeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = DatastoreSchemeEnumString(string(text))
	return err
}
