// Code generated by "enumer -type NetworkConnStatusEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _NetworkConnStatusEnumName = "NOT_CONNECTEDCONNECTED"

var _NetworkConnStatusEnumIndex = [...]uint8{0, 13, 22}

const _NetworkConnStatusEnumLowerName = "not_connectedconnected"

func (i NetworkConnStatusEnum) String() string {
	if i < 0 || i >= NetworkConnStatusEnum(len(_NetworkConnStatusEnumIndex)-1) {
		return fmt.Sprintf("NetworkConnStatusEnum(%d)", i)
	}
	return _NetworkConnStatusEnumName[_NetworkConnStatusEnumIndex[i]:_NetworkConnStatusEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _NetworkConnStatusEnumNoOp() {
	var x [1]struct{}
	_ = x[NetworkNotConnected-(0)]
	_ = x[NetworkConnected-(1)]
}

var _NetworkConnStatusEnumValues = []NetworkConnStatusEnum{NetworkNotConnected, NetworkConnected}

var _NetworkConnStatusEnumNameToValueMap = map[string]NetworkConnStatusEnum{
	_NetworkConnStatusEnumName[0:13]:       NetworkNotConnected,
	_NetworkConnStatusEnumLowerName[0:13]:  NetworkNotConnected,
	_NetworkConnStatusEnumName[13:22]:      NetworkConnected,
	_NetworkConnStatusEnumLowerName[13:22]: NetworkConnected,
}

var _NetworkConnStatusEnumNames = []string{
	_NetworkConnStatusEnumName[0:13],
	_NetworkConnStatusEnumName[13:22],
}

// NetworkConnStatusEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NetworkConnStatusEnumString(s string) (NetworkConnStatusEnum, error) {
	if val, ok := _NetworkConnStatusEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _NetworkConnStatusEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NetworkConnStatusEnum values", s)
}

// NetworkConnStatusEnumValues returns all values of the enum
func NetworkConnStatusEnumValues() []NetworkConnStatusEnum {
	return _NetworkConnStatusEnumValues
}

// NetworkConnStatusEnumStrings returns a slice of all String values of the enum
func NetworkConnStatusEnumStrings() []string {
	strs := make([]string, len(_NetworkConnStatusEnumNames))
	copy(strs, _NetworkConnStatusEnumNames)
	return strs
}

// IsANetworkConnStatusEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NetworkConnStatusEnum) IsANetworkConnStatusEnum() bool {
	for _, v := range _NetworkConnStatusEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for NetworkConnStatusEnum
func (i NetworkConnStatusEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NetworkConnStatusEnum
func (i *NetworkConnStatusEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = NetworkConnStatusEnumString(string(text))
	return err
}
