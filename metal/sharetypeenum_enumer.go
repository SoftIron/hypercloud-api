// Code generated by "enumer -type ShareTypeEnum -linecomment -text"; DO NOT EDIT.

package metal

import (
	"fmt"
	"strings"
)

const _ShareTypeEnumName = "SMBCephFSiSCSIRBD"

var _ShareTypeEnumIndex = [...]uint8{0, 3, 9, 14, 17}

const _ShareTypeEnumLowerName = "smbcephfsiscsirbd"

func (i ShareTypeEnum) String() string {
	if i < 0 || i >= ShareTypeEnum(len(_ShareTypeEnumIndex)-1) {
		return fmt.Sprintf("ShareTypeEnum(%d)", i)
	}
	return _ShareTypeEnumName[_ShareTypeEnumIndex[i]:_ShareTypeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ShareTypeEnumNoOp() {
	var x [1]struct{}
	_ = x[ShareTypeSSM-(0)]
	_ = x[ShareTypeCephFS-(1)]
	_ = x[ShareTypeISCSI-(2)]
	_ = x[ShareTypeRBD-(3)]
}

var _ShareTypeEnumValues = []ShareTypeEnum{ShareTypeSSM, ShareTypeCephFS, ShareTypeISCSI, ShareTypeRBD}

var _ShareTypeEnumNameToValueMap = map[string]ShareTypeEnum{
	_ShareTypeEnumName[0:3]:        ShareTypeSSM,
	_ShareTypeEnumLowerName[0:3]:   ShareTypeSSM,
	_ShareTypeEnumName[3:9]:        ShareTypeCephFS,
	_ShareTypeEnumLowerName[3:9]:   ShareTypeCephFS,
	_ShareTypeEnumName[9:14]:       ShareTypeISCSI,
	_ShareTypeEnumLowerName[9:14]:  ShareTypeISCSI,
	_ShareTypeEnumName[14:17]:      ShareTypeRBD,
	_ShareTypeEnumLowerName[14:17]: ShareTypeRBD,
}

var _ShareTypeEnumNames = []string{
	_ShareTypeEnumName[0:3],
	_ShareTypeEnumName[3:9],
	_ShareTypeEnumName[9:14],
	_ShareTypeEnumName[14:17],
}

// ShareTypeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShareTypeEnumString(s string) (ShareTypeEnum, error) {
	if val, ok := _ShareTypeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ShareTypeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShareTypeEnum values", s)
}

// ShareTypeEnumValues returns all values of the enum
func ShareTypeEnumValues() []ShareTypeEnum {
	return _ShareTypeEnumValues
}

// ShareTypeEnumStrings returns a slice of all String values of the enum
func ShareTypeEnumStrings() []string {
	strs := make([]string, len(_ShareTypeEnumNames))
	copy(strs, _ShareTypeEnumNames)
	return strs
}

// IsAShareTypeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShareTypeEnum) IsAShareTypeEnum() bool {
	for _, v := range _ShareTypeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ShareTypeEnum
func (i ShareTypeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ShareTypeEnum
func (i *ShareTypeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = ShareTypeEnumString(string(text))
	return err
}
