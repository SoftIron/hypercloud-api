// Code generated by "enumer -type OsdStateEnum -linecomment -text"; DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"
)

const _OsdStateEnumName = "UPDOWNOUT"

var _OsdStateEnumIndex = [...]uint8{0, 2, 6, 9}

const _OsdStateEnumLowerName = "updownout"

func (i OsdStateEnum) String() string {
	if i < 0 || i >= OsdStateEnum(len(_OsdStateEnumIndex)-1) {
		return fmt.Sprintf("OsdStateEnum(%d)", i)
	}
	return _OsdStateEnumName[_OsdStateEnumIndex[i]:_OsdStateEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OsdStateEnumNoOp() {
	var x [1]struct{}
	_ = x[OsdStateUp-(0)]
	_ = x[OsdStateDown-(1)]
	_ = x[OsdStateOut-(2)]
}

var _OsdStateEnumValues = []OsdStateEnum{OsdStateUp, OsdStateDown, OsdStateOut}

var _OsdStateEnumNameToValueMap = map[string]OsdStateEnum{
	_OsdStateEnumName[0:2]:      OsdStateUp,
	_OsdStateEnumLowerName[0:2]: OsdStateUp,
	_OsdStateEnumName[2:6]:      OsdStateDown,
	_OsdStateEnumLowerName[2:6]: OsdStateDown,
	_OsdStateEnumName[6:9]:      OsdStateOut,
	_OsdStateEnumLowerName[6:9]: OsdStateOut,
}

var _OsdStateEnumNames = []string{
	_OsdStateEnumName[0:2],
	_OsdStateEnumName[2:6],
	_OsdStateEnumName[6:9],
}

// OsdStateEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OsdStateEnumString(s string) (OsdStateEnum, error) {
	if val, ok := _OsdStateEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OsdStateEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OsdStateEnum values", s)
}

// OsdStateEnumValues returns all values of the enum
func OsdStateEnumValues() []OsdStateEnum {
	return _OsdStateEnumValues
}

// OsdStateEnumStrings returns a slice of all String values of the enum
func OsdStateEnumStrings() []string {
	strs := make([]string, len(_OsdStateEnumNames))
	copy(strs, _OsdStateEnumNames)
	return strs
}

// IsAOsdStateEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OsdStateEnum) IsAOsdStateEnum() bool {
	for _, v := range _OsdStateEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OsdStateEnum
func (i OsdStateEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OsdStateEnum
func (i *OsdStateEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = OsdStateEnumString(string(text))
	return err
}
