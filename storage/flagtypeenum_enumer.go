// Code generated by "enumer -type FlagTypeEnum -linecomment -text"; DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"
)

const _FlagTypeEnumName = "PRIORITYEXPECTEDINFORMATIONAL"

var _FlagTypeEnumIndex = [...]uint8{0, 8, 16, 29}

const _FlagTypeEnumLowerName = "priorityexpectedinformational"

func (i FlagTypeEnum) String() string {
	if i < 0 || i >= FlagTypeEnum(len(_FlagTypeEnumIndex)-1) {
		return fmt.Sprintf("FlagTypeEnum(%d)", i)
	}
	return _FlagTypeEnumName[_FlagTypeEnumIndex[i]:_FlagTypeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlagTypeEnumNoOp() {
	var x [1]struct{}
	_ = x[FlagTypePriority-(0)]
	_ = x[FlagTypeExpected-(1)]
	_ = x[FlagTypeInformational-(2)]
}

var _FlagTypeEnumValues = []FlagTypeEnum{FlagTypePriority, FlagTypeExpected, FlagTypeInformational}

var _FlagTypeEnumNameToValueMap = map[string]FlagTypeEnum{
	_FlagTypeEnumName[0:8]:        FlagTypePriority,
	_FlagTypeEnumLowerName[0:8]:   FlagTypePriority,
	_FlagTypeEnumName[8:16]:       FlagTypeExpected,
	_FlagTypeEnumLowerName[8:16]:  FlagTypeExpected,
	_FlagTypeEnumName[16:29]:      FlagTypeInformational,
	_FlagTypeEnumLowerName[16:29]: FlagTypeInformational,
}

var _FlagTypeEnumNames = []string{
	_FlagTypeEnumName[0:8],
	_FlagTypeEnumName[8:16],
	_FlagTypeEnumName[16:29],
}

// FlagTypeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlagTypeEnumString(s string) (FlagTypeEnum, error) {
	if val, ok := _FlagTypeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlagTypeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlagTypeEnum values", s)
}

// FlagTypeEnumValues returns all values of the enum
func FlagTypeEnumValues() []FlagTypeEnum {
	return _FlagTypeEnumValues
}

// FlagTypeEnumStrings returns a slice of all String values of the enum
func FlagTypeEnumStrings() []string {
	strs := make([]string, len(_FlagTypeEnumNames))
	copy(strs, _FlagTypeEnumNames)
	return strs
}

// IsAFlagTypeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlagTypeEnum) IsAFlagTypeEnum() bool {
	for _, v := range _FlagTypeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for FlagTypeEnum
func (i FlagTypeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FlagTypeEnum
func (i *FlagTypeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = FlagTypeEnumString(string(text))
	return err
}
