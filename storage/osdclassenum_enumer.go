// Code generated by "enumer -type OsdClassEnum -linecomment -text"; DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"
)

const _OsdClassEnumName = "SSDHDD"

var _OsdClassEnumIndex = [...]uint8{0, 3, 6}

const _OsdClassEnumLowerName = "ssdhdd"

func (i OsdClassEnum) String() string {
	if i < 0 || i >= OsdClassEnum(len(_OsdClassEnumIndex)-1) {
		return fmt.Sprintf("OsdClassEnum(%d)", i)
	}
	return _OsdClassEnumName[_OsdClassEnumIndex[i]:_OsdClassEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OsdClassEnumNoOp() {
	var x [1]struct{}
	_ = x[OsdClassSsd-(0)]
	_ = x[OsdClassHdd-(1)]
}

var _OsdClassEnumValues = []OsdClassEnum{OsdClassSsd, OsdClassHdd}

var _OsdClassEnumNameToValueMap = map[string]OsdClassEnum{
	_OsdClassEnumName[0:3]:      OsdClassSsd,
	_OsdClassEnumLowerName[0:3]: OsdClassSsd,
	_OsdClassEnumName[3:6]:      OsdClassHdd,
	_OsdClassEnumLowerName[3:6]: OsdClassHdd,
}

var _OsdClassEnumNames = []string{
	_OsdClassEnumName[0:3],
	_OsdClassEnumName[3:6],
}

// OsdClassEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OsdClassEnumString(s string) (OsdClassEnum, error) {
	if val, ok := _OsdClassEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OsdClassEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OsdClassEnum values", s)
}

// OsdClassEnumValues returns all values of the enum
func OsdClassEnumValues() []OsdClassEnum {
	return _OsdClassEnumValues
}

// OsdClassEnumStrings returns a slice of all String values of the enum
func OsdClassEnumStrings() []string {
	strs := make([]string, len(_OsdClassEnumNames))
	copy(strs, _OsdClassEnumNames)
	return strs
}

// IsAOsdClassEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OsdClassEnum) IsAOsdClassEnum() bool {
	for _, v := range _OsdClassEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OsdClassEnum
func (i OsdClassEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OsdClassEnum
func (i *OsdClassEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = OsdClassEnumString(string(text))
	return err
}
