// Code generated by "enumer -type IscsiExportableTypeEnum -linecomment -text"; DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"
)

const _IscsiExportableTypeEnumName = "AVAILABLEEXPORTEDINVALID_OPTIONS"

var _IscsiExportableTypeEnumIndex = [...]uint8{0, 9, 17, 32}

const _IscsiExportableTypeEnumLowerName = "availableexportedinvalid_options"

func (i IscsiExportableTypeEnum) String() string {
	if i < 0 || i >= IscsiExportableTypeEnum(len(_IscsiExportableTypeEnumIndex)-1) {
		return fmt.Sprintf("IscsiExportableTypeEnum(%d)", i)
	}
	return _IscsiExportableTypeEnumName[_IscsiExportableTypeEnumIndex[i]:_IscsiExportableTypeEnumIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IscsiExportableTypeEnumNoOp() {
	var x [1]struct{}
	_ = x[IscsiExportableTypeAvailable-(0)]
	_ = x[IscsiExportableTypeExported-(1)]
	_ = x[IscsiExportableTypeInvalid-(2)]
}

var _IscsiExportableTypeEnumValues = []IscsiExportableTypeEnum{IscsiExportableTypeAvailable, IscsiExportableTypeExported, IscsiExportableTypeInvalid}

var _IscsiExportableTypeEnumNameToValueMap = map[string]IscsiExportableTypeEnum{
	_IscsiExportableTypeEnumName[0:9]:        IscsiExportableTypeAvailable,
	_IscsiExportableTypeEnumLowerName[0:9]:   IscsiExportableTypeAvailable,
	_IscsiExportableTypeEnumName[9:17]:       IscsiExportableTypeExported,
	_IscsiExportableTypeEnumLowerName[9:17]:  IscsiExportableTypeExported,
	_IscsiExportableTypeEnumName[17:32]:      IscsiExportableTypeInvalid,
	_IscsiExportableTypeEnumLowerName[17:32]: IscsiExportableTypeInvalid,
}

var _IscsiExportableTypeEnumNames = []string{
	_IscsiExportableTypeEnumName[0:9],
	_IscsiExportableTypeEnumName[9:17],
	_IscsiExportableTypeEnumName[17:32],
}

// IscsiExportableTypeEnumString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IscsiExportableTypeEnumString(s string) (IscsiExportableTypeEnum, error) {
	if val, ok := _IscsiExportableTypeEnumNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IscsiExportableTypeEnumNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IscsiExportableTypeEnum values", s)
}

// IscsiExportableTypeEnumValues returns all values of the enum
func IscsiExportableTypeEnumValues() []IscsiExportableTypeEnum {
	return _IscsiExportableTypeEnumValues
}

// IscsiExportableTypeEnumStrings returns a slice of all String values of the enum
func IscsiExportableTypeEnumStrings() []string {
	strs := make([]string, len(_IscsiExportableTypeEnumNames))
	copy(strs, _IscsiExportableTypeEnumNames)
	return strs
}

// IsAIscsiExportableTypeEnum returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IscsiExportableTypeEnum) IsAIscsiExportableTypeEnum() bool {
	for _, v := range _IscsiExportableTypeEnumValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for IscsiExportableTypeEnum
func (i IscsiExportableTypeEnum) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for IscsiExportableTypeEnum
func (i *IscsiExportableTypeEnum) UnmarshalText(text []byte) error {
	var err error
	*i, err = IscsiExportableTypeEnumString(string(text))
	return err
}
